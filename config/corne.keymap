#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// LAYERS NAMES
#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define NUMBER 4
// COMBO FOR ALL LAYERS
#define COMBO_ALL(NAME, BINDINGS, KEYPOS) \
        combo_##NAME { \
                timeout-ms = <50>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
                layers = <0 1 2 3 4 5 6 7 8 9>; \
        };
// COMBO FOR LAYERS
#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
        combo_##NAME { \
                timeout-ms = <50>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
                layers = <LAYERS>; \
        };
// PRESS OPTIONS
&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <500>;
    quick-release;
};
// KEYBOARD
/ {
        macros {
                // TAB: PREV
                tab_prev: tab_prev {
                        label = "ZM_tab_prev";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_press &kp LCTRL>
                                , <&macro_tap &kp PAGE_UP>
                                , <&macro_release &kp LCTRL>;
                };
                // TAB: NEXT
                tab_next: tab_next {
                        label = "ZM_tab_next";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL>
                                , <&macro_tap &kp PAGE_DOWN>
                                , <&macro_release &kp LCTRL>;
                };
                // LANGUAGE: ENG
                lng_eng: lng_eng {
                        label = "ZM_lng_eng";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LSHFT>
                                , <&macro_tap &kp N1>
                                , <&macro_release &kp LCTRL &kp LSHFT>;
                };
                // LANGUAGE: LT
                lng_lt: lng_lt {
                        label = "ZM_lng_lt";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LSHFT>
                                , <&macro_tap &kp N2>
                                , <&macro_release &kp LCTRL &kp LSHFT>;
                };
                // LANGUAGE: RU
                lng_ru: lng_ru {
                        label = "ZM_lng_ru";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LSHFT>
                                , <&macro_tap &kp N3>
                                , <&macro_release &kp LCTRL &kp LSHFT>;
                };
                // ALT CODE: =
                key_summary: key_summary {
                        label = "ZM_key_summary";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp KP_N6 &kp KP_N1>
                                , <&macro_release &kp LALT>;
                };
                // LOWER WITH ALT (FOR LT)
                lower_ralt: lower_ralt {
                        label = "ZM_lower_ralt";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &mo LOWER &kp RALT>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo LOWER &kp RALT>;
                };
                // RAISE WITH ALT (FOR LT)
                raise_ralt: raise_ralt {
                        label = "ZM_raise_ralt";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &mo RAISE &kp RALT>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo RAISE &kp RALT>;
                };
                // NUMBER WITH ALT (FOR ALT CODES)
                number_lalt: number_lalt {
                        label = "ZM_number_lalt";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &mo NUMBER &kp LALT>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo NUMBER &kp LALT>;
                };
        };
        behaviors {
                // EXAMPLE (NOT USED)
                td_alt: tab_dance_alt {
                        label = "TAP_DANCE_ALT";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LALT>, <&mo NUMBER>;
                };
        };
        conditional_layers {
                compatible = "zmk,conditional-layers";
                // ADJUST LAYER
                base_adjust_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };
        combos {
                compatible = "zmk,combos"; 
                // BUTTON INDEXES
                // | 0  | 1  | 2  | 3  | 4  | 5  | ___ | 6  | 7  | 8  | 9  | 10 | 11 |
                // | 12 | 13 | 14 | 15 | 16 | 17 | ___ | 18 | 19 | 20 | 21 | 22 | 23 |
                // | 24 | 25 | 26 | 27 | 28 | 29 | ___ | 30 | 31 | 32 | 33 | 34 | 35 |
                //                | 36 | 37 | 38 | ___ | 39 | 40 | 41 |
                // ESC
                COMBO_ALL(esc_one_two, &kp ESC, 0 1)
                COMBO(esc_null_one, &kp ESC, 10 11, 0)
                // LANGUAGES
                COMBO(set_eng, &lng_eng, 2 3 4, 1)
                COMBO(set_lt, &lng_lt, 14 15 16, 1)
                COMBO(set_ru, &lng_ru, 26 27 28, 1)
                // BLUETOOTH CLEAR
                COMBO(bt_clr, &bt BT_CLR, 24 25 34 35, 3)
                // LT NUMBERS, SYMBOLS
                COMBO(lower_layer_ralt, &lower_ralt, 36 37, 0)
                COMBO(raise_layer_ralt, &raise_ralt, 40 41, 0)
        };
        keymap {
                compatible = "zmk,keymap";
                base_layer {
                        label = "BASE";
                        // | TAB   | Q | W | E    | R     | T   | /**/ | Y     | U     | I   | O | P | BSPC |
                        // | LCTRL | A | S | D    | F     | G   | /**/ | H     | J     | K   | L | : | '    |
                        // | SHIFT | Z | X | C    | V     | B   | /**/ | N     | M     | ,   | . | / | DEL  |
                        //                 | LALT | LOWER | SPC | /**/ | ENTER | RAISE | GUI |
                        bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T     /**/ &kp Y      &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F      &kp G     /**/ &kp H      &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B     /**/ &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp DEL
                         &kp LALT  &mo LOWER  &kp SPACE /**/ &kp ENTER  &mo RAISE  &kp LGUI
                        >;
                };
                lower_layer {
                        label = "LOWER";
                        // | `     | 1    | 2    | 3    | 4     | 5    | /**/ | 6     | 7     | 8    | 9  | 0     | BSPC |
                        // | CTRL  |      | TABP | TABN | ANUMB | NUMB | /**/ | INS   | -     | =    | [  | ]     | \    |
                        // | SHIFT | PLAY | PREV | NEXT | VDN   | VUP  | /**/ | PRINT | LEFT  | DOWN | UP | RIGHT | DEL  |
                        //                       | LALT | HELD  | SPC  | /**/ | ENTER | RAISE | GUI  |
                        bindings = <
&kp GRAVE  &kp N1            &kp N2      &kp N3      &kp N4        &kp N5       /**/ &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &kp BSPC
&kp LCTRL  &none             &tab_prev   &tab_next   &number_lalt  &mo NUMBER   /**/ &kp INS    &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
&kp LSHFT  &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP /**/ &kp PSCRN  &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &kp DEL
                                         &kp LALT    &mo LOWER     &kp SPACE    /**/ &kp ENTER  &mo RAISE  &kp LGUI
                        >;
                };
                raise_layer {
                        label = "RAISE";
                        // | ~     | !  | @  | #    | $     | %   | /**/ | ^     | &    | *    | (    | )   | BSPC |
                        // | CTRL  | F1 | F2 | F3   | F4    | F5  | /**/ | F6    | _    | +    | {    | }   | "|"  |
                        // | SHIFT | F7 | F8 | F9   | F10   | F11 | /**/ | F12   | HOME | PGDN | PGUP | END | DEL  |
                        //                   | LALT | LOWER | SPC | /**/ | ENTER | HELD | GUI  |
                        bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp PRCNT /**/ &kp CARET  &kp AMPS   &kp ASTERISK   &kp LPAR     &kp RPAR  &kp BSPC
&kp LCTRL  &kp F1    &kp F2  &kp F3    &kp F4     &kp F5    /**/ &kp F6     &kp UNDER  &kp PLUS       &kp LBRC     &kp RBRC  &kp PIPE
&kp LSHFT  &kp F7    &kp F8  &kp F9    &kp F10    &kp F11   /**/ &kp F12    &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END   &kp DEL
                             &kp LALT  &mo LOWER  &kp SPACE /**/ &kp ENTER  &mo RAISE  &kp LGUI
                        >;
                };
                adjust_layer {
                        label = "ADJUST";
                        // |       |       |     |    |      |    | /**/ | BT1 | BT2  | BT3  | BT4 | BT5 |   |
                        // | CLOCK | SLOCK | ENG | LT | RU   |    | /**/ |     | HOME |EMAIL |     |     |   |
                        // |       |       |     |    |      |    | /**/ |     |      |      |     |     |   |
                        //                       |    | HELD |    | /**/ |     | HELD |      |
                        bindings = <
&none         &none           &none     &none      &none    &none /**/ &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &none
&kp CAPSLOCK  &kp SCROLLLOCK  &lng_eng  &lng_lt    &lng_ru  &none /**/ &none         &kp C_AC_HOME  &kp C_AL_EMAIL  &none         &none         &none
&none         &none           &none     &none      &none    &none /**/ &none         &none          &none           &none         &none         &none
                              &none     &mo LOWER  &none    &none /**/ &mo RAISE     &none
                        >;
                };
                number_layer {
                        label = "NUMBER";
                        // | NLOCK | 1 | 2 | 3    | 4    | 5    | /**/ | 6     | 7 | 8 | 9 | 0 | BSPC |
                        // | LCTRL | = | - | /    | HELD | HELD | /**/ | -     | 4 | 5 | 6 | / | =    |
                        // | LSHFT |   | + | *    |      | CALC | /**/ | +     | 1 | 2 | 3 | * | DEL  |
                        //                 | LALT | HELD | SPC  | /**/ | ENTER | , | 0 |
                        bindings = <
&kp KP_NLCK  &kp KP_N1     &kp KP_N2     &kp KP_N3        &kp KP_N4            &kp KP_N5 /**/ &kp KP_N6     &kp KP_N7   &kp KP_N8  &kp KP_N9  &kp KP_N0        &kp BSPC
&kp LCTRL    &key_summary  &kp KP_MINUS  &kp KP_DIVIDE    &none                &none     /**/ &kp KP_MINUS  &kp KP_N4   &kp KP_N5  &kp KP_N6  &kp KP_DIVIDE    &key_summary
&kp LSHFT    &none         &kp KP_PLUS   &kp KP_MULTIPLY  &kp C_AL_CALCULATOR  &none     /**/ &kp KP_PLUS   &kp KP_N1   &kp KP_N2  &kp KP_N3  &kp KP_MULTIPLY  &kp DEL
                                         &kp LALT         &none                &kp SPACE /**/ &kp ENTER     &kp KP_DOT  &kp KP_N0
                        >;
                };
        };
};